= Functional Programming

Het basisprincipe achter functioneel programmeren is statelessness of immutability, nl. het nooit _wijzigen_ van waardes.
Bv. indien men een lijst wil uitbreiden met een element, moet men een _nieuwe_ lijst aanmaken met dat extra element in.

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
x = 5   # Ok
x = 6   # Mag niet, wijzigt x

ns = [1, 2, 3]  # Ok
ns.append(4)    # Mag niet, wijzigt lijst
ks = [*ns, 4]   # Ok
----
====

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
let x = 5;    // Ok
x = 6         // Mag niet, wijzigt x

const ns = [1, 2, 3];  // Ok
ns.push(4);            // Mag niet, wijzigt lijst
const ks = [...ns, 4]; // Ok
----
====

== Aspects

=== Pure Functions

Functies kunnen vaak op twee manieren geschreven worden:

* Ze wijzigen hun argument en geven niets terug (= stateful, imperatieve stijl).
* Ze laten hun argument met rust en geven een nieuwe waarde terug (= stateless, functionele stijl).

.Voorbeeld in Python
[%collapsible]
====
[source,python]
----
# Imperative style modifies parameter
def double_elements(ns):
  for i in range(len(ns)):
    ns[i] *= 2


# Functional style creates new list
def double_elements(ns):
  result = []
  for n in ns:
    result.append(n * 2)
  return result
----
====

.Voorbeeld in JavaScript
[%collapsible]
====
[source,javascript]
----
// Imperative style modifies parameter
function doubleAll(ns)
{
    for ( let i = 0; i !== ns.length; ++i )
    {
        ns[i] *= 2;
    }
}


// Functional style creates new list
function doubleAll(ns)
{
    const result = [];

    for ( const n of ns )
    {
        result.append(n);
    }

    return result;
}
----
====

=== Comprehensions

Comprehensions laten toe gemakkelijk met lijsten/sets/dictionaries te werken.

==== Mapping

Mapping houdt in dat men op elk element van een lijst eenzelfde operatie toepast en de resultaten verzamelt in een nieuwe lijst.

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
def double_all(ns):
    return [n * 2 for n in ns]

def names(people):
    return [person.name for person in people]

def average_grade(students):
    all_grades = [student.grade for group in year for student in group]
    return sum(all_grades) / len(all_grades)
----
====

.C# Voorbeelden
[%collapsible]
====
[source,csharp]
----
IEnumerable<int> DoubleAll(IEnumerable<int> ns)
{
    return from n in ns
           select n * 2;
}

// Alternative syntax
IEnumerable<int> DoubleAll(IEnumerable<int> ns)
{
    return ns.Select(n => n * 2);
}

IEnumerable<string> DoubleAll(IEnumerable<Person> people)
{
    return from person in people
           select person.Name;
}
----
====

==== Filtering

.Python Voorbeelden
[%collapsible]
====
[source,python]
def names_of_men(people):
    return [person.name for person in people
                        if person.male]
====

.C# Voorbeelden
[%collapsible]
====
[source,csharp]
----
IEnumerable<string> NamesOfMen(IEnumerable<Person> people)
{
    return from person in people
           where person.IsMale
           select person.Name;
}

// Alternative syntax
IEnumerable<string> NamesOfMen(IEnumerable<Person> people)
{
    return people
        .Where(person => person.IsMale)
        .Select(person => person.Name);
}
----
====

=== First Class Functions and Higher Order Functions

*First class values* zijn waardes die

* in een variabele kunnen bewaard worden,
* als parameter kunnen doorgegeven worden, en
* teruggegeven kunnen worden als resultaat.

Typische voorbeelden zijn integers, strings, booleans, objecten, etc.
Functies zijn in de meeste talen echter ook first-class values.

Een *higher order function* is een functie die als parameter ontvangt.

[NOTE]
====
Merk op dat indien men in een OO taal een object doorgeeft als parameter, dit in een verzameling van functies is die worden doorgegeven.
====

Men kan een onderscheid maken tussen

* het schrijven van higher order functions,
* het oproepen van higher order functions.

==== map

`map` past eenzelfde operatie toe op elk element van een lijst en geeft de resultaten terug.

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
Array.prototype.map = function (xs)
{
    const result = [];

    for ( const x of this )
    {
        result.push(f(x));
    }

    return result;
}

function totalCost(items)
{
    return sum(items.map(item => item.price));
}
----
====

==== filter

`filter` selecteert elementen uit een lijst die voldoen aan een bepaald criterium.

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
Array.prototype.filter = function(pred)
{
    const result = [];

    for ( const x of this )
    {
        if ( pred(x) )
        {
            result.push(x);
        }
    }

    return result;
}

function tallPeople(people)
{
    return people.filter(person => person.height >= 190);
}
----
====

==== count

`count` telt het aantal elementen die voldoen aan een bepaald criterium.

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
Array.prototype.count = function (pred)
{
    let result = 0;

    for ( const x of this )
    {
        if ( pred(x) )
        {
            result++;
        }
    }

    return result;
}

function minesAround(mineField, position)
{
    return mineField.around(position).count(p => mineField.at(p) === MINE);
}
----
====

==== find

`find` zoekt het eerste element dat voldoet aan een bepaald criterium.

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
Array.prototype.find = function (pred)
{
    for ( const x of this )
    {
        if ( pred(x) )
        {
            return x;
        }
    }
}

function findDuplicates(xs)
{
    return xs.find(x => xs.count(x) > 1);
}
----
====

==== Other Examples

* `sort`
* `any`
* `all`
* `partition`
* `minBy`, `maxBy`
* `reduce`
* `groupBy`
* `takeWhile`, `dropWhile`

== Better Algorithm Structure

.Ruby Voorbeelden
[%collapsible]
====
[source,ruby]
----
Exam = Struct.new :student, :course, :grade

def format_ranking(exams)
{
    exams.groupBy { |exam| exam.student }
         .transform_values { |exams| exams.map(&:grade).sum / exams.size }
         .to_a
         .sort_by { |student, average| average }
         .first(3)
         .map { |student, average| "#{student.rjust(10)} #{score}" }
         .join("\n")
}
----
====

=== Lambda Expressions

Een *lambda expression* is een functie zonder naam.

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
xs = [1,2,3,4,5]

odd_xs = filter(lambda x: x % 2 != 0, xs)
----
====

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
const xs = [1,2,3,4,5];

const greaterThanTwo = xs.filter(x => x > 2);
----
====

=== Recursion

Lussen zijn onmogelijk in een zuiver functionele context.
Gezien waarden niet kunnen gewijzigd worden, zal in zulk een context een conditie-expressie altijd dezelfde waarde opleveren:

[source,python]
----
while condition:
    ...
----

* Ofwel evalueert `condition` altijd naar `true` en zitten we met een oneindige lus.
* Ofwel evalueert `condition` altijd naar `false` en wordt de lus overgeslagen.

Recursie is dan de enige manier om code te herhalen.

[NOTE]
====
In zuiver functionele talen wordt doorgaans zelden met recursie gewerkt omdat de beoogde functionaliteit reeds geïmplementeerd is als functies zoals `map`, `filter`, `reduce`, etc.
====

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
def names(people):
  if people:
    first, *rest = people
    return [first.name, *names(rest)]
  else:
    return []
----
====

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
function names(people)
{
    if ( people.length === 0 )
    {
        return [];
    }
    else
    {
        const [first, ...rest] = people;

        return [first.name, ...names(rest)];
    }
}
----
====

=== Persistent Data Structures

Datastructuren die gebruikt worden in functionele context zijn

* Linked lists
* Trees

==== Structural Sharing

Stateless waarden kunnen herbruikt worden.
Datastructuren kunnen bijgevolg gebruik maken van gedeelde objecten om hun data in op te slaan.

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
class BinaryTree:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


# Inserts without duplicates
def insert(tree, value):
    if tree is None:
        return BinaryTree(value)
    elif value < tree.value:
        return BinaryTree(tree.value, insert(tree.left, value), tree.right)
    elif value > tree.value:
        return BinaryTree(tree.value, tree.left, insert(tree.right, value))
    else:
        return tree
----
====

=== Memoization

Stateless functions zijn deterministisch: zelfde input leidt tot zelfde output.
Deze resultaten kunnen gecachet worden.

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
primes = {}

def is_prime(n):
    global primes
    if n not in primes:
        primes[n] = all(k % n != 0 for k in range(2, n))

    return primes[n]
----
====

=== Laziness

=== Generators

.Python Voorbeelden
[%collapsible]
====
[source,python]
----
def numbers(n):
    while True:
        yield n
        n += 1
----
====

.JavaScript Voorbeelden
[%collapsible]
====
[source,javascript]
----
function* numbers(n)
{
    while ( true )
    {
        yield n++;
    }
}
----
====

== Voordelen

* "Design patterns" voor algoritmes, dwingt extra structuur af
* Voorkomt veel bugs
* Gemakkelijker te debuggen
* Parallelliseerbaar
* Wordt gebruikt in data science
* Wordt gebruikt in moderne frameworks zoals React
* Veiliger voor asynchrone code
* Quasi-noodzakelijk voor gedistribueerde systemen

== Types Oefeningen

* Gebruik van higher order functions
* Definiëren van higher order functions
* Herschrijven van stateful naar stateless
